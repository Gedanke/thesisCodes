# -*- coding: utf-8 -*-

from dpc import *

PATH = "../../dataSet/"
DATAS = ['test.dat']

metric_way_set = {
    "braycurtis", "canberra", "chebyshev", "cityblock", "correlation", "cosine", "dice", "euclidean", "hamming",
    "jaccard", "jensenshannon", "kulczynski1", "mahalanobis", "matching", "minkowski", "rogerstanimoto", "russellrao",
    "seuclidean", "sokalmichener", "sokalsneath", "sqeuclidean", "yule"
}


def distance_(samples: pandas.DataFrame, metric_way='euclidean') -> numpy.ndarray:
    """
    样本度量方法
    Parameters
    ----------
    samples: pandas.DataFrame 只含属性列
    metric_way: 属性度量方法

    Returns
    -------
    dis_array: 返回的依然是距离度量的矩阵(列表)
    维度为 samples_num * (samples_num - 1) / 2
    """
    # '''此处使用的是欧式距离'''
    # dis_array = sch.distance.pdist(samples, metric_way)
    # return dis_array

    '''样本个数'''
    samples_num = len(samples)
    '''预分配空间'''
    dis_array = numpy.zeros((int(samples_num * (samples_num - 1) / 2)))

    idx = 0
    for i in range(0, samples_num):
        for j in range(i + 1, samples_num):
            dis_array[idx] = metric_fun(samples.iloc[i, :], samples.iloc[j, :])
            idx += 1

    return dis_array


def metric_fun(x1, x2, metric_way='rod'):
    """

    Parameters
    ----------
    x1:
    x2:
    metric_way:
    Returns
    -------

    """
    res = -1
    mu = 1
    '''判断度量方法'''
    if metric_way == 'rod':
        idx1 = x1[0]
        idx2 = x2[0]
        '''o_a_b，b 在 a 的排序列表中的索引位置'''
        o_a_b = numpy.where(x1 == idx2)[0][0]
        '''o_b_a，a 在 b 的排序列表中的索引位置'''
        o_b_a = numpy.where(x2 == idx1)[0][0]
        '''d_a_b'''
        '''先切片，是 a 的排序列表中 [a,b] 的索引'''
        slice_a_b = x1[0:o_a_b + 1]
        '''索引在 b 中的位置的序数和'''
        d_a_b = sum(numpy.where(x2 == slice_a_b[:, None])[-1])
        '''d_b_a'''
        '''先切片，是 b 的排序列表中 [b,a] 的索引'''
        slice_b_a = x2[0:o_b_a + 1]
        '''索引在 a 中的位置的序数和'''
        d_b_a = sum(numpy.where(x1 == slice_b_a[:, None])[-1])
        res = (d_a_b + d_b_a) / min(o_a_b, o_b_a)
    elif metric_way == "krod":
        idx1 = x1[0]
        idx2 = x2[0]
        '''o_a_b，b 在 a 的排序列表中的索引位置'''
        o_a_b = numpy.where(x1 == idx2)[0][0]
        '''o_b_a，a 在 b 的排序列表中的索引位置'''
        o_b_a = numpy.where(x2 == idx1)[0][0]
        l_a_b = o_a_b + o_b_a
        k_a_b = math.exp(-((x1 - x2) / mu) ** 2)
        res = l_a_b * (1 / k_a_b)
    elif metric_way == "irod":
        idx1 = x1[0]
        idx2 = x2[0]
        '''o_a_b，b 在 a 的排序列表中的索引位置'''
        o_a_b = numpy.where(x1 == idx2)[0][0]
        '''o_b_a，a 在 b 的排序列表中的索引位置'''
        o_b_a = numpy.where(x2 == idx1)[0][0]

        #
    return res


def distance(path):
    """

    Parameters
    ----------
    path

    Returns
    -------

    """
    samples = pandas.read_csv(path, usecols=[0, 1])
    '''样本个数'''
    samples_num = len(samples)
    '''距离矩阵初始化'''
    dis_matrix = pandas.DataFrame(numpy.zeros((samples_num, samples_num)))
    '''预分配空间'''
    dis_array = sch.distance.pdist(samples, 'euclidean')

    '''对距离矩阵的处理'''
    num = 0
    for i in range(samples_num):
        for j in range(i + 1, samples_num):
            '''赋值'''
            dis_matrix.at[i, j] = dis_array[num]
            '''处理对角元素'''
            dis_matrix.at[j, i] = dis_matrix.at[i, j]
            num += 1

    rank_order_table = numpy.array(dis_matrix).argsort()
    """
    [[ 0  1  2  3  7  6  5  4  8  9 10 11]
 [ 1  2  0  3  7  6  5  4  8  9 10 11]
 [ 2  1  3  0  7  6  8  5  9  4 10 11]
 [ 3  2  1  0  7  8  6  9 10  5 11  4]
 [ 4  5  6  7 11 10  9  0  8  1  2  3]
 [ 5  4  6  7 11  0 10  1  9  2  3  8]
 [ 6  7  5  4  0  1  2 11  3 10  9  8]
 [ 7  6  5  4  0  1  2  3 11 10  9  8]
 [ 8  9 10 11  3  2  4  1  5  6  0  7]
 [ 9 10  8 11  4  3  5  6  2  7  1  0]
 [10  9 11  8  4  5  6  3  7  2  1  0]
 [11 10  9  8  4  5  6  7  3  2  1  0]]
    """
    print(metric_fun(rank_order_table[4, :], rank_order_table[9, :], "rod"))
    # l = numpy.array([0, 3, 2, 1, 4])
    # search = numpy.array([3, 4])
    # print(numpy.where(l == search[:, None])[-1])
    # print(l[0:3])
    # print(l)


def test():
    """

    Returns
    -------

    """
    # p = PATH + "data/test.csv"
    # distance(p)
    # d = DPC(p, num=3, use_halo=True)
    # d.cluster()
    # print(d.dis_matrix)

    d1 = {351: [351, 259, 350, 346, 347, 311, 262, 294, 345, 312, 313, 349, 352, 348, 370, 373, 380, 258, 368, 381, 314, 318, 372, 371, 378, 310, 343, 377, 369, 375, 379, 376, 263, 319, 293, 391, 265, 309, 374, 317, 387, 261, 342, 388, 390, 394, 257, 341, 382, 365, 389, 392, 393, 308, 386, 266, 260, 384, 383, 364, 292, 412, 366, 409, 413, 256, 344, 414, 315, 321, 367, 307, 411, 410, 264, 249, 385, 320, 340, 291, 248, 245, 448, 415, 316, 447, 395, 363, 254, 276, 446, 246, 247, 255, 429, 417, 277, 430, 416, 267, 408, 451, 452, 244, 450, 301, 361, 362, 306, 250, 268, 286, 339, 322, 449, 331, 445, 236, 251, 431, 419, 238, 420, 407, 237, 300, 252, 418, 330, 443, 396, 305, 275, 432, 242, 454, 457, 458, 278, 402, 455, 428, 444, 243, 235, 453, 290, 360, 228, 332, 421, 299, 274, 456, 225, 329, 223, 442, 323, 285, 229, 226, 422, 338, 460, 241, 298, 353, 459, 406, 354, 253, 401, 279, 441, 397, 427, 227, 273, 359, 437, 324, 230, 405, 289, 224, 239, 222, 461, 304, 470, 269, 333, 473, 297, 334, 240, 234, 211, 282, 328, 212, 426, 214, 462, 423, 474, 436, 337, 302, 471, 231, 220, 472, 424, 404, 272, 440, 358, 400, 210, 435, 288, 221, 355, 284, 207, 216, 357, 467, 280, 466, 325, 215, 335, 326, 206, 464, 327, 270, 399, 439, 208, 296, 433, 434, 425, 468, 336, 303, 475, 356, 205, 232, 219, 295, 287, 438, 281, 213, 271, 204, 209, 398, 218, 283, 403, 217, 233, 465, 476, 463, 469], 615: [615, 640, 614, 639, 618, 613, 635, 641, 637, 616, 638, 617, 636, 642, 603, 611, 612, 600, 658, 668, 619, 669, 634, 653, 625, 602, 667, 652, 604, 666, 670, 677, 678, 657, 633, 599, 643, 624, 601, 679, 605, 647, 626, 671, 676, 672, 598, 654, 620, 656, 699, 610, 680, 632, 631, 681, 698, 665, 648, 623, 675, 587, 593, 585, 597, 627, 606, 592, 688, 589, 651, 584, 594, 701, 700, 644, 682, 609, 661, 697, 708, 621, 586, 660, 655, 686, 583, 687, 664, 646, 607, 696, 588, 689, 673, 591, 662, 590, 674, 608, 628, 702, 683, 622, 595, 582, 645, 649, 659, 629, 690, 695, 581, 706, 650, 684, 705, 580, 630, 596, 703, 693, 691, 663, 685, 692, 707, 694, 704], 123: [123, 57, 81, 83, 126, 124, 72, 122, 49, 50, 58, 56, 121, 55, 127, 82, 96, 137, 84, 47, 120, 125, 59, 97, 71, 51, 98, 48, 46, 139, 138, 70, 45, 99, 128, 32, 94, 54, 85, 80, 52, 31, 110, 79, 141, 33, 65, 135, 140, 44, 136, 142, 95, 129, 60, 24, 134, 53, 30, 93, 111, 148, 73, 40, 86, 143, 149, 38, 43, 130, 23, 34, 26, 25, 67, 100, 101, 150, 153, 113, 61, 19, 16, 39, 133, 66, 37, 27, 20, 63, 147, 102, 77, 29, 42, 92, 151, 112, 152, 114, 35, 17, 131, 154, 10, 107, 9, 41, 87, 68, 144, 15, 156, 91, 132, 115, 64, 106, 155, 21, 157, 14, 74, 78, 116, 11, 89, 109, 28, 7, 146, 159, 103, 22, 12, 118, 62, 18, 158, 8, 75, 5, 162, 108, 4, 145, 117, 160, 163, 36, 119, 104, 69, 13, 161, 88, 6, 90, 105, 164, 169, 76, 2, 3, 167, 1, 168, 165, 0, 166], 544: [544, 542, 540, 543, 524, 554, 541, 523, 513, 510, 522, 555, 525, 539, 537, 545, 511, 552, 565, 509, 512, 553, 526, 514, 508, 527, 563, 492, 491, 567, 556, 498, 557, 521, 515, 528, 566, 538, 533, 564, 562, 497, 507, 536, 518, 489, 529, 546, 548, 490, 560, 551, 575, 573, 487, 520, 499, 561, 494, 568, 559, 496, 488, 516, 493, 532, 549, 570, 547, 576, 558, 577, 530, 495, 572, 500, 503, 505, 578, 517, 506, 483, 535, 485, 550, 480, 534, 519, 574, 478, 569, 579, 502, 571, 531, 484, 481, 486, 482, 477, 479, 501, 504], 723: [723, 743, 722, 721, 735, 744, 724, 734, 736, 742, 720, 728, 748, 718, 746, 737, 719, 729, 741, 725, 715, 716, 733, 717, 745, 753, 738, 726, 752, 747, 732, 709, 712, 751, 714, 730, 710, 749, 731, 711, 739, 713, 750, 740, 727], 768: [768, 769, 767, 764, 782, 763, 778, 762, 770, 779, 766, 781, 783, 773, 775, 756, 761, 757, 786, 758, 780, 787, 777, 776, 772, 771, 784, 760, 755, 774, 785, 759, 765, 754], 190: [190, 189, 191, 198, 185, 199, 186, 187, 192, 188, 200, 184, 197, 201, 202, 174, 178, 193, 203, 175, 183, 176, 180, 172, 196, 195, 173, 177, 170, 194, 171, 181, 182, 179]}


    d2 = {351: [351, 259, 350, 346, 347, 311, 262, 294, 345, 312, 313, 349, 352, 348, 370, 373, 380, 258, 368, 381, 314, 318, 372, 371, 378, 310, 343, 377, 369, 375, 379, 376, 263, 319, 293, 391, 265, 309, 374, 317, 387, 261, 342, 388, 390, 394, 257, 341, 382, 365, 389, 392, 393, 308, 386, 266, 260, 384, 383, 364, 292, 412, 366, 409, 413, 256, 344, 414, 315, 321, 367, 307, 411, 410, 264, 249, 385, 320, 340, 291, 248, 245, 448, 415, 316, 447, 395, 363, 254, 276, 446, 246, 247, 255, 429, 417, 277, 430, 416, 267, 408, 451, 452, 244, 450, 301, 361, 362, 306, 250, 268, 286, 339, 322, 449, 331, 445, 236, 251, 431, 419, 238, 420, 407, 237, 300, 252, 418, 330, 443, 396, 305, 275, 432, 242, 454, 457, 458, 278, 402, 455, 428, 444, 243, 235, 453, 290, 360, 228, 332, 421, 299, 274, 456, 225, 329, 223, 442, 323, 285, 229, 226, 422, 338, 460, 241, 298, 353, 459, 406, 354, 253, 401, 279, 441, 397, 427, 227, 273, 359, 437, 324, 230, 405, 289, 224, 239, 222, 461, 304, 470, 269, 333, 473, 297, 334, 240, 234, 211, 282, 328, 212, 426, 214, 462, 423, 474, 436, 337, 302, 471, 231, 220, 472, 424, 404, 272, 440, 358, 400, 210, 435, 288, 221, 355, 284, 207, 216, 357, 467, 280, 466, 325, 215, 335, 326, 206, 464, 327, 270, 399, 439, 208, 296, 433, 434, 425, 468, 336, 303, 475, 356, 205, 232, 219, 295, 287, 438, 281, 213, 271, 204, 209, 398, 218, 283, 403, 217, 233, 465, 476, 463, 469], 615: [615, 640, 614, 639, 618, 613, 635, 641, 637, 616, 638, 617, 636, 642, 603, 611, 612, 600, 658, 668, 619, 669, 634, 653, 625, 602, 667, 652, 604, 666, 670, 677, 678, 657, 633, 599, 643, 624, 601, 679, 605, 647, 626, 671, 676, 672, 598, 654, 620, 656, 699, 610, 680, 632, 631, 681, 698, 665, 648, 623, 675, 587, 593, 585, 597, 627, 606, 592, 688, 589, 651, 584, 594, 701, 700, 644, 682, 609, 661, 697, 708, 621, 586, 660, 655, 686, 583, 687, 664, 646, 607, 696, 588, 689, 673, 591, 662, 590, 674, 608, 628, 702, 683, 622, 595, 582, 645, 649, 659, 629, 690, 695, 581, 706, 650, 684, 705, 580, 630, 596, 703, 693, 691, 663, 685, 692, 707, 694, 704], 123: [123, 57, 81, 83, 126, 124, 72, 122, 49, 50, 58, 56, 121, 55, 127, 82, 96, 137, 84, 47, 120, 125, 59, 97, 71, 51, 98, 48, 46, 139, 138, 70, 45, 99, 128, 32, 94, 54, 85, 80, 52, 31, 110, 79, 141, 33, 65, 135, 140, 44, 136, 142, 95, 129, 60, 24, 134, 53, 30, 93, 111, 148, 73, 40, 86, 143, 149, 38, 43, 130, 23, 34, 26, 25, 67, 100, 101, 150, 153, 113, 61, 19, 16, 39, 133, 66, 37, 27, 20, 63, 147, 102, 77, 29, 42, 92, 151, 112, 152, 114, 35, 17, 131, 154, 10, 107, 9, 41, 87, 68, 144, 15, 156, 91, 132, 115, 64, 106, 155, 21, 157, 14, 74, 78, 116, 11, 89, 109, 28, 7, 146, 159, 103, 22, 12, 118, 62, 18, 158, 8, 75, 5, 162, 108, 4, 145, 117, 160, 163, 36, 119, 104, 69, 13, 161, 88, 6, 90, 105, 164, 169, 76, 2, 3, 167, 1, 168, 165, 0, 166], 544: [544, 542, 540, 543, 524, 554, 541, 523, 513, 510, 522, 555, 525, 539, 537, 545, 511, 552, 565, 509, 512, 553, 526, 514, 508, 527, 563, 492, 491, 567, 556, 498, 557, 521, 515, 528, 566, 538, 533, 564, 562, 497, 507, 536, 518, 489, 529, 546, 548, 490, 560, 551, 575, 573, 487, 520, 499, 561, 494, 568, 559, 496, 488, 516, 493, 532, 549, 570, 547, 576, 558, 577, 530, 495, 572, 500, 503, 505, 578, 517, 506, 483, 535, 485, 550, 480, 534, 519, 574, 478, 569, 579, 502, 571, 531, 484, 481, 486, 482, 477, 479, 501, 504], 723: [723, 743, 722, 721, 735, 744, 724, 734, 736, 742, 720, 728, 748, 718, 746, 737, 719, 729, 741, 725, 715, 716, 733, 717, 745, 753, 738, 726, 752, 747, 732, 709, 712, 751, 714, 730, 710, 749, 731, 711, 739, 713, 750, 740, 727], 768: [768, 769, 767, 764, 782, 763, 778, 762, 770, 779, 766, 781, 783, 773, 775, 756, 761, 757, 786, 758, 780, 787, 777, 776, 772, 771, 784, 760, 755, 774, 785, 759, 765, 754], 190: [190, 189, 191, 198, 185, 199, 186, 187, 192, 188, 200, 184, 197, 201, 202, 174, 178, 193, 203, 175, 183, 176, 180, 172, 196, 195, 173, 177, 170, 194, 171, 181, 182, 179]}


    print(d1 == d2)


if __name__ == "__main__":
    """"""
    test()
